#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader e79c225854485011
uniform ivec4 uf_remappedPS[5];
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0x30440000 res 64x64x1 dim 1 tm: 4 format 0431 compSel: 0 1 2 3 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0x30442800 res 4x4x1 dim 1 tm: 2 format 0034 compSel: 0 0 0 5 mipView: 0x0 (num 0x3) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 3) uniform sampler2D textureUnitPS3;// Tex3 addr 0x30440800 res 4x4x1 dim 1 tm: 2 format 0031 compSel: 0 1 2 3 mipView: 0x0 (num 0x3) sliceView: 0x0 (num 0x1) Sampler3 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 4) uniform sampler2D textureUnitPS4;// Tex4 addr 0x30442000 res 64x64x1 dim 1 tm: 4 format 0034 compSel: 0 0 0 0 mipView: 0x0 (num 0x7) sliceView: 0x0 (num 0x1) Sampler4 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 3) in vec4 passParameterSem3;
layout(location = 4) in vec4 passParameterSem4;
layout(location = 0) out vec4 passPixelColor0;
layout(location = 1) out vec4 passPixelColor1;
layout(location = 3) out vec4 passPixelColor3;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }

vec3 hsb2rgb( in vec3 c ){
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0) -1.0, 0.0, 1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix(vec3(1.0), rgb, c.y);
}

vec3 rgb2hsb( in vec3 c ){
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

void main()
{
//float red, green, blue = 0;
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 Temp0i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
R3i = floatBitsToInt(passParameterSem3);
R4i = floatBitsToInt(passParameterSem4);
R1i.xy = floatBitsToInt(texture(textureUnitPS3, intBitsToFloat(R0i.xy)).xy);
R2i.w = floatBitsToInt(texture(textureUnitPS2, intBitsToFloat(R0i.xy)).x);
R2i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R2i.xy)).xyz);
R0i.xyz = floatBitsToInt(texture(textureUnitPS4, intBitsToFloat(R0i.zw)).xyz);
// 0
backupReg0i = R1i.w;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].x), intBitsToFloat(uf_remappedPS[1].w)));
PV0i.x = R127i.x;
R127i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[0].y), intBitsToFloat(uf_remappedPS[1].w)));
PV0i.y = R127i.y;
PV0i.z = 0;
R1i.w = floatBitsToInt((intBitsToFloat(R1i.z) * 2.0 + -(1.0)));
R5i.x = floatBitsToInt((intBitsToFloat(backupReg0i) * 2.0 + -(1.0)));
PS0i = R5i.x;
// 1 do some math rpobably getting reflect, light angle or, something like that
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(PV0i.x),intBitsToFloat(PV0i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R125i.y = floatBitsToInt((intBitsToFloat(R1i.x) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
PS1i = R125i.y;
// 2
R126i.x = floatBitsToInt((intBitsToFloat(R1i.y) * intBitsToFloat(0x40008102) + intBitsToFloat(0xbf810204)));
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.x), intBitsToFloat(R4i.y)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.z), intBitsToFloat(R4i.x)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R3i.y), intBitsToFloat(R4i.z)));
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
// 3
backupReg0i = R127i.x;
R127i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS0i)));
PV1i.x = R127i.x;
R1i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(backupReg0i), intBitsToFloat(PS0i)));
R127i.z = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R4i.y)),intBitsToFloat(R3i.z)) + intBitsToFloat(PV0i.w)));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R125i.y), intBitsToFloat(R125i.y)));
R127i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R4i.z)),intBitsToFloat(R3i.x)) + intBitsToFloat(PV0i.z)));
PS1i = R127i.w;
// 4
backupReg0i = R126i.y;
R123i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.x),intBitsToFloat(R126i.x)) + intBitsToFloat(PV1i.w)));
R123i.x = clampFI32(R123i.x);
PV0i.x = R123i.x;
R126i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R4i.w), intBitsToFloat(R126i.x)));
PV0i.y = R126i.y;
PV0i.z = ((intBitsToFloat(PV1i.x) > 0.0)?int(0xFFFFFFFF):int(0x0));
R126i.w = floatBitsToInt((mul_nonIEEE(-(intBitsToFloat(R4i.x)),intBitsToFloat(R3i.y)) + intBitsToFloat(backupReg0i)));
R126i.z = floatBitsToInt(intBitsToFloat(0x427f0000) * intBitsToFloat(R2i.w));
PS0i = R126i.z;
// 5
PV1i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.z), intBitsToFloat(PV0i.y)));
PV1i.y = floatBitsToInt(-(intBitsToFloat(PV0i.x)) + 1.0);
R1i.z = floatBitsToInt(((PV0i.z == 0)?(-(intBitsToFloat(R127i.x))):(intBitsToFloat(R127i.x))));
R2i.w = floatBitsToInt(((PV0i.z == 0)?(-(intBitsToFloat(R127i.x))):(intBitsToFloat(R127i.x))));
PS1i = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.w), intBitsToFloat(PV0i.y)));
// 6
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.w), intBitsToFloat(R126i.y)));
PV0i.y = floatBitsToInt(floor(intBitsToFloat(R126i.z)));
PV0i.y = floatBitsToInt(intBitsToFloat(PV0i.y) * 4.0);
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.y),intBitsToFloat(R125i.y)) + intBitsToFloat(PS1i)));
PV0i.z = R123i.z;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.x),intBitsToFloat(R125i.y)) + intBitsToFloat(PV1i.x)));
PV0i.w = R123i.w;
R127i.x = floatBitsToInt(sqrt(intBitsToFloat(PV1i.y)));
PS0i = R127i.x;
// 7
backupReg0i = R125i.y;
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.x),intBitsToFloat(PS0i)) + intBitsToFloat(PV0i.w)));
R125i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.y),intBitsToFloat(PS0i)) + intBitsToFloat(PV0i.z)));
R126i.z = 0x3d60e0e1;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R4i.z),intBitsToFloat(backupReg0i)) + intBitsToFloat(PV0i.x)));
PV1i.w = R123i.w;
R126i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + 2.0);
PS1i = R126i.x;
// 8
 // R0i.x = floatBitsToInt(((R0i.z > intBitsToFloat(17676767))?((intBitsToFloat(R0i.x)*25)):(intBitsToFloat(R0i.x))));
//R2i.x = floatBitsToInt(intBitsToFloat(R2i.x)*2);
// R0i.xyz = floatBitsToInt(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z));

// Temp0i.xyz = R0i.xyz;
// R0i.x = floatBitsToInt(((intBitsToFloat(R0i.z) < 1.01)?(min((intBitsToFloat(Temp0i.x)*.2),(intBitsToFloat(Temp0i.x)))):(intBitsToFloat(Temp0i.x))));
// R0i.y = floatBitsToInt(((intBitsToFloat(R0i.z) < 1.01)?(min((intBitsToFloat(Temp0i.y)*.2),(intBitsToFloat(Temp0i.y)))):(intBitsToFloat(Temp0i.y))));
// R0i.z = floatBitsToInt(((intBitsToFloat(R0i.z) < 1.01)?(min((intBitsToFloat(Temp0i.z)*.2),(intBitsToFloat(Temp0i.z)))):(intBitsToFloat(Temp0i.z))));
//Temp0i.xyz = rgb2hsb(R0i.xyz);


// Temp0i.xyz = R0i.xyz;
    // vec3 rgb = clamp(abs(mod(Temp0i.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0) -1.0, 0.0, 1.0 );
    // rgb = rgb*rgb*(3.0-2.0*rgb);
// Temp0i.xyz = floatBitsToInt(intBitsToFloat(Temp0i.z) * mix(vec3(1.0), intBitsToFloat(rgb), intBitsToFloat(Temp0i.y)));


   //R0i.xyz = hsb2rgb((intBitsToFloat(R0i.x)),(intBitsToFloat(R0i.y)),(intBitsToFloat(R0i.z)));

// Temp0i.xyz = R2i.xyz;
// R2i.x = floatBitsToInt(((intBitsToFloat(R2i.z) < 1)?((intBitsToFloat(Temp0i.x)*25)):(intBitsToFloat(Temp0i.x))));
// R2i.y = floatBitsToInt(((intBitsToFloat(R2i.z) < 1)?((intBitsToFloat(Temp0i.y))):(intBitsToFloat(Temp0i.y))));
// R2i.z = floatBitsToInt(((intBitsToFloat(R2i.z) < 1)?((intBitsToFloat(Temp0i.z))):(intBitsToFloat(Temp0i.z))));
//


// red = 1;
// green = .5;
// blue = .51;
// Temp0i.xyz = R2i.xyz;
//if the red value is less than the blue value... since we have blue eyes then change the red value.. else leave alone
// R2i.x = floatBitsToInt(((intBitsToFloat(Temp0i.x) < intBitsToFloat(Temp0i.z))?((intBitsToFloat(Temp0i.y)*red)):(intBitsToFloat(Temp0i.x))));
// R2i.y = floatBitsToInt(((intBitsToFloat(Temp0i.y) < intBitsToFloat(Temp0i.z))?((intBitsToFloat(Temp0i.y)*green)):(intBitsToFloat(Temp0i.y))));
// R2i.z = floatBitsToInt(((intBitsToFloat(Temp0i.z) > intBitsToFloat(Temp0i.y))?((intBitsToFloat(Temp0i.z)*blue)):(intBitsToFloat(Temp0i.z))));


///

R3i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.x), intBitsToFloat(R0i.x)));
R3i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.y), intBitsToFloat(R0i.y)));
R127i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R3i.z),intBitsToFloat(R127i.x)) + intBitsToFloat(PV1i.w)));
PV0i.z = R127i.z;
R4i.w = floatBitsToInt(1.0);
R3i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R2i.z), intBitsToFloat(R0i.z)));
PS0i = R3i.z;






// 9
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R125i.x),intBitsToFloat(R125i.y),intBitsToFloat(PV0i.z),-0.0),vec4(intBitsToFloat(R125i.x),intBitsToFloat(R125i.y),intBitsToFloat(PV0i.z),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R0i.w = floatBitsToInt(intBitsToFloat(R126i.x) * intBitsToFloat(0x3b808081));
PS1i = R0i.w;
// 10
R4i.x = R126i.z;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV1i.x));
PS0i = floatBitsToInt(tempResultf);
PS0i = floatBitsToInt(intBitsToFloat(PS0i) / 2.0);
// 11
R0i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(PS0i)) + 0.5));
R0i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.y),intBitsToFloat(PS0i)) + 0.5));
R0i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R127i.z),intBitsToFloat(PS0i)) + 0.5));
// 0
PV0i.x = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(R1i.w)));
PV0i.y = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].z), intBitsToFloat(R5i.x)));
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].x), intBitsToFloat(R1i.w)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].x), intBitsToFloat(R5i.x)));
// 1
R125i.x = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(R2i.w)) + intBitsToFloat(PV0i.w)));
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].y),intBitsToFloat(R1i.y)) + intBitsToFloat(PV0i.z)));
PV1i.y = R123i.y;
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),intBitsToFloat(R1i.y)) + intBitsToFloat(PV0i.x)));
PV1i.z = R123i.z;
R126i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[2].w),intBitsToFloat(R1i.z)) + intBitsToFloat(PV0i.y)));
// 2
PV0i.x = uf_remappedPS[3].z;
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.y)));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.z), intBitsToFloat(PV1i.z)));
// 3
R123i.y = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R126i.w),intBitsToFloat(R126i.w)) + intBitsToFloat(PV0i.w)));
PV1i.y = R123i.y;
R4i.z = PV0i.x;
R123i.w = floatBitsToInt((mul_nonIEEE(intBitsToFloat(R125i.x),intBitsToFloat(R125i.x)) + intBitsToFloat(PV0i.z)));
PV1i.w = R123i.w;
// 4
PV0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + 1.0);
PV0i.x = clampFI32(PV0i.x);
PV0i.y = floatBitsToInt(-(intBitsToFloat(PV1i.w)) + 1.0);
PV0i.y = clampFI32(PV0i.y);
// 5
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.y) + intBitsToFloat(0xbf2aaae3));
R125i.y = PV0i.x;
R125i.y = clampFI32(R125i.y);
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.x) + intBitsToFloat(0xbf2aaae3));
R126i.w = PV0i.y;
R126i.w = clampFI32(R126i.w);
// 6
PV0i.z = floatBitsToInt(intBitsToFloat(PV1i.x) * intBitsToFloat(0x41400000));
PV0i.z = clampFI32(PV0i.z);
PV0i.w = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(0x41400000));
PV0i.w = clampFI32(PV0i.w);
// 7
PV1i.x = floatBitsToInt(intBitsToFloat(PV0i.w) * intBitsToFloat(0x3e99999a));
PV1i.y = floatBitsToInt(intBitsToFloat(PV0i.z) * intBitsToFloat(0x3e99999a));
// 8
R123i.x = floatBitsToInt((intBitsToFloat(R126i.w) * intBitsToFloat(0x3e4ccccd) + intBitsToFloat(PV1i.y)));
R123i.x = clampFI32(R123i.x);
PV0i.x = R123i.x;
R126i.w = floatBitsToInt((intBitsToFloat(R125i.y) * intBitsToFloat(0x3e4ccccd) + intBitsToFloat(PV1i.x)));
R126i.w = clampFI32(R126i.w);
// 9
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].x), intBitsToFloat(PV0i.x)));
// 10
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(uf_remappedPS[4].x),intBitsToFloat(R126i.w)) + intBitsToFloat(PV1i.z)));
PV0i.z = R123i.z;
// 11
PV1i.y = floatBitsToInt(intBitsToFloat(0x427f0000) * intBitsToFloat(PV0i.z));
// 12
PV0i.x = floatBitsToInt(floor(intBitsToFloat(PV1i.y)));
PV0i.x = floatBitsToInt(intBitsToFloat(PV0i.x) * 4.0);
// 13
R3i.w = floatBitsToInt(intBitsToFloat(PV0i.x) * intBitsToFloat(0x3b808081));
// 14
R2i.xyz = ivec3(R0i.x,R0i.y,R0i.z);
R2i.w = R0i.w;
// 15
R1i.xyz = ivec3(R3i.x,R3i.y,R3i.z);
R1i.w = R3i.w;
// 16
R0i.xyz = ivec3(R4i.x,R4i.z,R4i.z);
R0i.w = R4i.w;

// red = .4;
// green = 1;
// blue = 1.3;

// red = 1;
// green = 1;
// blue = .1;

Temp0i.xyz = R1i.xyz;
// //if the red value is less than the blue value... since we have blue eyes then change the red value.. else leave alone
R1i.x = floatBitsToInt(((intBitsToFloat(Temp0i.x) < intBitsToFloat(Temp0i.z))?((intBitsToFloat(Temp0i.y)*$Red)):(intBitsToFloat(Temp0i.x))));
R1i.y = floatBitsToInt(((intBitsToFloat(Temp0i.y) < intBitsToFloat(Temp0i.z))?((intBitsToFloat(Temp0i.y)*$Green)):(intBitsToFloat(Temp0i.y))));
R1i.z = floatBitsToInt(((intBitsToFloat(Temp0i.z) > intBitsToFloat(Temp0i.y))?((intBitsToFloat(Temp0i.z)*$Blue)):(intBitsToFloat(Temp0i.z))));




// export
passPixelColor0 = vec4(intBitsToFloat(R0i.x), intBitsToFloat(R0i.y), intBitsToFloat(R0i.z), intBitsToFloat(R0i.w));
passPixelColor1 = vec4(intBitsToFloat(R1i.x), intBitsToFloat(R1i.y), intBitsToFloat(R1i.z), intBitsToFloat(R1i.w));
passPixelColor3 = vec4(intBitsToFloat(R2i.x), intBitsToFloat(R2i.y), intBitsToFloat(R2i.z), intBitsToFloat(R2i.w));
}
